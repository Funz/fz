name: SSH Localhost Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  ssh-localhost-test:
    name: SSH localhost on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest
        pip install getpass4

    - name: Setup SSH server (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "Installing and starting SSH server..."
        sudo apt-get update
        sudo apt-get install -y openssh-server
        sudo systemctl enable ssh
        sudo systemctl start ssh
        echo "✓ SSH server installed and started"

        echo "Configuring SSH key authentication..."
        sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
        sudo sed -i 's/#PubkeyAuthentication no/PubkeyAuthentication yes/g' /etc/ssh/sshd_config
        sudo sed -i 's/#ChallengeResponseAuthentication yes/ChallengeResponseAuthentication no/g' /etc/ssh/sshd_config

        echo "Restarting sshd service..."
        sudo systemctl restart sshd
        echo "✓ SSH configuration complete"

    - name: Setup SSH server (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "Enabling SSH server..."
        sudo systemsetup -setremotelogin on
        sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist || true
        echo "✓ SSH server installed and started"

        echo "Configuring SSH key authentication..."
        sudo sed -i '' 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config || true
        sudo sed -i '' 's/#PubkeyAuthentication no/PubkeyAuthentication yes/g' /etc/ssh/sshd_config || true
        sudo sed -i '' 's/#ChallengeResponseAuthentication yes/ChallengeResponseAuthentication no/g' /etc/ssh/sshd_config || true

        echo "Restarting sshd service..."
        sudo launchctl stop com.openssh.sshd || true
        sudo launchctl start com.openssh.sshd || true
        echo "✓ SSH configuration complete"

    - name: Setup SSH server (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Installing OpenSSH server..."
        Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
        Start-Service sshd
        Set-Service -Name sshd -StartupType 'Automatic'
        Write-Host "✓ SSH server installed and started"

        Write-Host "Configuring SSH key authentication..."
        $sshd_config = "$env:ProgramData\ssh\sshd_config"
        (Get-Content $sshd_config) -replace 'PasswordAuthentication yes', 'PasswordAuthentication no' | Set-Content $sshd_config
        (Get-Content $sshd_config) -replace '#PubkeyAuthentication no', 'PubkeyAuthentication yes' | Set-Content $sshd_config
        (Get-Content $sshd_config) -replace '#ChallengeResponseAuthentication yes', 'ChallengeResponseAuthentication no' | Set-Content $sshd_config

        Write-Host "Restarting sshd service..."
        Restart-Service sshd
        Write-Host "✓ SSH configuration complete"

    - name: Verify SSH server is running
      shell: bash
      run: |
        echo "Checking if SSH server is listening..."
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          netstat -an | grep ":22 " || netstat -an | grep LISTENING
        else
          ss -tln | grep :22 || netstat -an | grep LISTEN | grep :22
        fi
        echo "✓ SSH server is running"

    - name: Run SSH localhost test
      run: |
        python -m pytest tests/test_ssh_localhost.py::test_ssh_localhost_with_dedicated_key -v -s

    - name: Test summary
      if: always()
      run: |
        echo "SSH localhost connectivity test completed"
