name: README Code Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test-readme:
    name: Test README.md Code Chunks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pandas matplotlib

    - name: Extract and test Python code chunks
      run: |
        python - << 'PYTHON_SCRIPT'
        import re
        import ast
        import sys
        import tempfile
        import subprocess
        from pathlib import Path

        # Read README
        readme = Path('README.md').read_text()

        # Extract code blocks with language tags
        code_blocks = re.findall(r'```(\w+)\n(.*?)\n```', readme, re.DOTALL)

        errors = []
        tested = 0

        print("=" * 60)
        print("Testing Python code chunks from README.md")
        print("=" * 60)

        for i, (lang, code) in enumerate(code_blocks):
            if lang.lower() == 'python':
                tested += 1
                print(f"\n[Chunk {i+1}] Testing Python code ({len(code)} chars)...")

                # Skip if it's just imports without fz
                if 'import fz' not in code and 'from fz' not in code:
                    if code.strip().startswith('import') or code.strip().startswith('from'):
                        print("  → Skipped (import-only chunk)")
                        continue

                # Try to parse the code
                try:
                    ast.parse(code)
                    print("  ✓ Syntax valid")
                except SyntaxError as e:
                    error_msg = f"Chunk {i+1}: Syntax error - {e}"
                    errors.append(error_msg)
                    print(f"  ✗ {error_msg}")

        print("\n" + "=" * 60)
        print(f"Tested {tested} Python chunks")

        if errors:
            print(f"\n❌ Found {len(errors)} errors:")
            for error in errors:
                print(f"  - {error}")
            sys.exit(1)
        else:
            print("\n✅ All Python code chunks have valid syntax!")
        PYTHON_SCRIPT

    - name: Test Quick Start example
      run: |
        python - << 'PYTHON_SCRIPT'
        import tempfile
        import subprocess
        from pathlib import Path
        import sys

        # Create a temporary directory for testing
        with tempfile.TemporaryDirectory() as tmpdir:
            tmpdir = Path(tmpdir)

            # Create input.txt
            input_file = tmpdir / "input.txt"
            input_file.write_text("""# input file for Perfect Gaz Pressure, with variables n_mol, T_celsius, V_L
        n_mol=$n_mol
        T_kelvin=@($T_celsius + 273.15)
        #@ def L_to_m3(L):
        #@     return(L / 1000)
        V_m3=@(L_to_m3($V_L))
        """)

            # Create PerfectGazPressure.sh
            calc_script = tmpdir / "PerfectGazPressure.sh"
            calc_script.write_text("""#!/bin/bash

        # read input file
        source $1

        sleep 1 # simulate a calculation time

        echo 'pressure = '`echo "scale=4;$n_mol*8.314*$T_kelvin/$V_m3" | bc` > output.txt

        echo 'Done'
        """)
            calc_script.chmod(0o755)

            # Create run_study.py
            run_script = tmpdir / "run_study.py"
            run_script.write_text("""import fz

        # Define the model
        model = {
            "varprefix": "$",
            "formulaprefix": "@",
            "delim": "()",
            "commentline": "#",
            "output": {
                "pressure": "grep 'pressure = ' output.txt | awk '{print $3}'"
            }
        }

        # Define parameter values
        varvalues = {
            "T_celsius": [10, 20],  # 2 temperatures (reduced for quick test)
            "V_L": [1, 2],           # 2 volumes (reduced for quick test)
            "n_mol": 1.0             # fixed amount
        }

        # Run all combinations (2 × 2 = 4 cases)
        results = fz.fzr(
            "input.txt",
            model,
            varvalues,
            calculators="sh://bash PerfectGazPressure.sh",
            resultsdir="results"
        )

        # Display results
        print(results)
        print(f"\\nCompleted {len(results)} calculations")

        # Verify we got expected number of results
        assert len(results) == 4, f"Expected 4 results, got {len(results)}"
        print("✅ Quick Start example passed!")
        """)

            # Run the test
            print("Testing Quick Start example...")
            result = subprocess.run(
                ["python", str(run_script)],
                cwd=tmpdir,
                capture_output=True,
                text=True
            )

            print(result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)

            if result.returncode != 0:
                print("❌ Quick Start example failed!")
                sys.exit(1)
        PYTHON_SCRIPT

    - name: Test fzi example
      run: |
        python - << 'PYTHON_SCRIPT'
        import tempfile
        from pathlib import Path
        import sys

        with tempfile.TemporaryDirectory() as tmpdir:
            tmpdir = Path(tmpdir)

            # Create input.txt
            input_file = tmpdir / "input.txt"
            input_file.write_text("""# input file
        T_celsius=$T_celsius
        V_L=$V_L
        n_mol=$n_mol
        """)

            # Test fzi
            import fz

            model = {
                "varprefix": "$",
                "delim": "()"
            }

            variables = fz.fzi(str(input_file), model)

            expected = {'T_celsius': None, 'V_L': None, 'n_mol': None}
            assert variables == expected, f"Expected {expected}, got {variables}"

            print("✅ fzi example passed!")
        PYTHON_SCRIPT

    - name: Test fzc example
      run: |
        python - << 'PYTHON_SCRIPT'
        import tempfile
        from pathlib import Path
        import sys
        import os

        with tempfile.TemporaryDirectory() as tmpdir:
            tmpdir = Path(tmpdir)

            # Create input.txt
            input_file = tmpdir / "input.txt"
            input_file.write_text("""# input file
        T_celsius=$T_celsius
        V_L=$V_L
        n_mol=$n_mol
        """)

            # Test fzc
            import fz

            model = {
                "varprefix": "$",
                "formulaprefix": "@",
                "delim": "()",
                "commentline": "#"
            }

            varvalues = {
                "T_celsius": 25,
                "V_L": 10,
                "n_mol": 2
            }

            output_dir = tmpdir / "compiled"
            fz.fzc(
                str(input_file),
                model,
                varvalues,
                engine="python",
                outputdir=str(output_dir)
            )

            # Check that output was created
            assert output_dir.exists(), "Output directory not created"

            # Check compiled file
            compiled_files = list(output_dir.rglob("input.txt"))
            assert len(compiled_files) > 0, "No compiled input.txt found"

            print("✅ fzc example passed!")
        PYTHON_SCRIPT
